#!/bin/bash

# Script para compilar e validar o documento LaTeX main.tex
# Autor: ChatWeb 2.0 Project
# Data: 7 de junho de 2025

set -e  # Sair em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Diret√≥rios
LATEX_DIR="latex"
MAIN_TEX="main.tex"
MAIN_PDF="main.pdf"
LOG_FILE="main.log"
AUX_FILE="main.aux"

# Fun√ß√£o para limpar arquivos auxiliares
cleanup_aux_files() {
    echo -e "${YELLOW}üßπ Limpando arquivos auxiliares...${NC}"
    rm -f *.aux *.log *.out *.toc *.lof *.lot *.bbl *.blg *.fls *.fdb_latexmk *.synctex.gz
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    echo -e "${BLUE}üîç Verificando depend√™ncias...${NC}"
    
    if ! command -v pdflatex &> /dev/null; then
        echo -e "${RED}‚ùå pdflatex n√£o encontrado! Instale texlive-basic.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ pdflatex encontrado${NC}"
}

# Fun√ß√£o para compilar o documento
compile_document() {
    echo -e "${BLUE}‚öôÔ∏è  Compilando documento LaTeX...${NC}"
    
    # Primeira compila√ß√£o
    echo -e "${YELLOW}üìù Primeira compila√ß√£o...${NC}"
    if pdflatex -interaction=nonstopmode "$MAIN_TEX" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Primeira compila√ß√£o conclu√≠da${NC}"
    else
        echo -e "${RED}‚ùå Erro na primeira compila√ß√£o!${NC}"
        show_errors
        return 1
    fi
    
    # Segunda compila√ß√£o (para resolver refer√™ncias)
    echo -e "${YELLOW}üìù Segunda compila√ß√£o (refer√™ncias)...${NC}"
    if pdflatex -interaction=nonstopmode "$MAIN_TEX" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Segunda compila√ß√£o conclu√≠da${NC}"
    else
        echo -e "${RED}‚ùå Erro na segunda compila√ß√£o!${NC}"
        show_errors
        return 1
    fi
}

# Fun√ß√£o para mostrar erros do log
show_errors() {
    if [ -f "$LOG_FILE" ]; then
        echo -e "${RED}üìã Erros encontrados no log:${NC}"
        grep -n "^!" "$LOG_FILE" | head -10
        echo -e "\n${YELLOW}üí° Verifique o arquivo $LOG_FILE para detalhes completos.${NC}"
    fi
}

# Fun√ß√£o para mostrar avisos importantes
show_warnings() {
    if [ -f "$LOG_FILE" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Verificando avisos importantes...${NC}"
        
        # Contar underfull/overfull boxes
        underfull_count=$(grep -c "Underfull" "$LOG_FILE" 2>/dev/null || echo "0")
        overfull_count=$(grep -c "Overfull" "$LOG_FILE" 2>/dev/null || echo "0")
        
        if [ "$underfull_count" -gt 0 ] || [ "$overfull_count" -gt 0 ]; then
            echo -e "${YELLOW}üìè Problemas de formata√ß√£o encontrados:${NC}"
            echo -e "   ‚Ä¢ Underfull boxes: $underfull_count"
            echo -e "   ‚Ä¢ Overfull boxes: $overfull_count"
            echo -e "${YELLOW}üí° Estes avisos s√£o geralmente cosm√©ticos e n√£o impedem a gera√ß√£o do PDF.${NC}"
        fi
        
        # Verificar cita√ß√µes indefinidas
        if grep -q "Citation.*undefined" "$LOG_FILE"; then
            echo -e "${YELLOW}üìö Cita√ß√µes indefinidas encontradas. Execute bibtex se necess√°rio.${NC}"
        fi
        
        # Verificar refer√™ncias indefinidas
        if grep -q "Reference.*undefined" "$LOG_FILE"; then
            echo -e "${YELLOW}üîó Refer√™ncias indefinidas encontradas.${NC}"
        fi
    fi
}

# Fun√ß√£o para validar o PDF gerado
validate_pdf() {
    echo -e "${BLUE}üîç Validando PDF gerado...${NC}"
    
    if [ ! -f "$MAIN_PDF" ]; then
        echo -e "${RED}‚ùå PDF n√£o foi gerado!${NC}"
        return 1
    fi
    
    # Verificar tamanho do arquivo
    pdf_size=$(stat -f%z "$MAIN_PDF" 2>/dev/null || stat -c%s "$MAIN_PDF" 2>/dev/null)
    if [ "$pdf_size" -lt 1000 ]; then
        echo -e "${RED}‚ùå PDF parece estar corrompido (muito pequeno: ${pdf_size} bytes)${NC}"
        return 1
    fi
    
    # Verificar se √© um PDF v√°lido
    if command -v file &> /dev/null; then
        if file "$MAIN_PDF" | grep -q "PDF"; then
            echo -e "${GREEN}‚úÖ PDF v√°lido gerado: ${pdf_size} bytes${NC}"
        else
            echo -e "${RED}‚ùå Arquivo gerado n√£o √© um PDF v√°lido${NC}"
            return 1
        fi
    else
        echo -e "${GREEN}‚úÖ PDF gerado: ${pdf_size} bytes${NC}"
    fi
    
    # Contar p√°ginas se poss√≠vel
    if command -v pdfinfo &> /dev/null; then
        pages=$(pdfinfo "$MAIN_PDF" 2>/dev/null | grep "Pages:" | awk '{print $2}')
        if [ -n "$pages" ]; then
            echo -e "${GREEN}üìÑ N√∫mero de p√°ginas: $pages${NC}"
        fi
    fi
}

# Fun√ß√£o para mostrar estat√≠sticas
show_statistics() {
    echo -e "\n${BLUE}üìä Estat√≠sticas do documento:${NC}"
    
    if [ -f "$MAIN_TEX" ]; then
        lines=$(wc -l < "$MAIN_TEX")
        words=$(wc -w < "$MAIN_TEX")
        chars=$(wc -c < "$MAIN_TEX")
        
        echo -e "   ‚Ä¢ Linhas: $lines"
        echo -e "   ‚Ä¢ Palavras: $words"
        echo -e "   ‚Ä¢ Caracteres: $chars"
    fi
    
    if [ -f "$MAIN_PDF" ]; then
        pdf_size=$(stat -f%z "$MAIN_PDF" 2>/dev/null || stat -c%s "$MAIN_PDF" 2>/dev/null)
        pdf_size_kb=$((pdf_size / 1024))
        echo -e "   ‚Ä¢ Tamanho do PDF: ${pdf_size_kb}KB"
    fi
}

# Fun√ß√£o principal
main() {
    # Verificar depend√™ncias
    check_dependencies
    
    # Limpar arquivos auxiliares antigos
    cleanup_aux_files
    
    # Compilar documento
    if compile_document; then
        echo -e "\n${GREEN}üéâ Compila√ß√£o conclu√≠da com sucesso!${NC}"
        
        # Validar PDF
        if validate_pdf; then
            # Mostrar avisos
            show_warnings
            
            # Mostrar estat√≠sticas
            show_statistics
            
            echo -e "\n${GREEN}‚úÖ Processo conclu√≠do! PDF dispon√≠vel em: $LATEX_DIR/$MAIN_PDF${NC}"
            
            # Sugerir visualiza√ß√£o
            echo -e "\n${BLUE}üí° Para visualizar o PDF:${NC}"
            echo -e "   xdg-open $LATEX_DIR/$MAIN_PDF"
            echo -e "   ou"
            echo -e "   evince $LATEX_DIR/$MAIN_PDF"
            
        else
            echo -e "\n${RED}‚ùå Falha na valida√ß√£o do PDF${NC}"
            exit 1
        fi
    else
        echo -e "\n${RED}‚ùå Falha na compila√ß√£o${NC}"
        exit 1
    fi
}

echo -e "${BLUE}=== ChatWeb 2.0 - Compilador LaTeX ===${NC}"
echo -e "Data: $(date)"
echo -e "Diret√≥rio: $(pwd)\n"

# Verificar argumentos da linha de comando primeiro
case "${1:-}" in
    --clean)
        echo -e "${YELLOW}üßπ Modo limpeza: removendo arquivos auxiliares...${NC}"
        # Verificar se o diret√≥rio latex existe
        if [ ! -d "$LATEX_DIR" ]; then
            echo -e "${RED}‚ùå Erro: Diret√≥rio '$LATEX_DIR' n√£o encontrado!${NC}"
            exit 1
        fi
        # Mudar para o diret√≥rio latex
        cd "$LATEX_DIR"
        cleanup_aux_files
        echo -e "${GREEN}‚úÖ Limpeza conclu√≠da${NC}"
        exit 0
        ;;
    --help|-h)
        echo -e "${BLUE}ChatWeb 2.0 - Compilador LaTeX${NC}"
        echo -e "\nUso: $0 [op√ß√£o]"
        echo -e "\nOp√ß√µes:"
        echo -e "  (sem argumentos)  Compilar e validar o documento"
        echo -e "  --clean          Limpar arquivos auxiliares"
        echo -e "  --help, -h       Mostrar esta ajuda"
        exit 0
        ;;
    "")
        # Continuar com a compila√ß√£o normal
        ;;
    *)
        echo -e "${RED}‚ùå Op√ß√£o inv√°lida: $1${NC}"
        echo -e "Use '$0 --help' para ver as op√ß√µes dispon√≠veis."
        exit 1
        ;;
esac

# Verificar se o diret√≥rio latex existe
if [ ! -d "$LATEX_DIR" ]; then
    echo -e "${RED}‚ùå Erro: Diret√≥rio '$LATEX_DIR' n√£o encontrado!${NC}"
    exit 1
fi

# Mudar para o diret√≥rio latex
cd "$LATEX_DIR"

# Verificar se o arquivo main.tex existe
if [ ! -f "$MAIN_TEX" ]; then
    echo -e "${RED}‚ùå Erro: Arquivo '$MAIN_TEX' n√£o encontrado!${NC}"
    exit 1
fi

echo -e "${BLUE}üìÑ Arquivo encontrado: $MAIN_TEX${NC}"

# Executar fun√ß√£o principal (s√≥ chega aqui se n√£o foi --clean ou --help)
main
